@page "/Login"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using PiaWebApp.Data
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject ApplicationDbContext DbContext
@inject ILogger<LoginViewModel> Logger

<div class="login-container">
    <img src="/image/logo.png" class="logo" alt="Store Logo" />
    <div class="code-label">Code</div>
    <input type="text"
           @bind="ViewModel.StoreCode"
           @bind:event="oninput"
           class="code-input @(ViewModel.IsInvalid ? "invalid" : "")"
           @onkeypress="HandleKeyPress"
           placeholder="Enter your code"
           autofocus />

    <button @onclick="HandleLogin"
            class="enter-button"
            disabled="@(string.IsNullOrWhiteSpace(ViewModel.StoreCode) || ViewModel.IsLoading)">
        @if (ViewModel.IsLoading)
        {
            <span class="spinner"></span>
        }
        else
        {
            <span>Enter</span>
        }
    </button>

    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <div class="error-message">
            <span class="exclamation-icon">!</span> @ViewModel.ErrorMessage
        </div>
    }
</div>

@code {
    private LoginViewModel ViewModel { get; set; } = new LoginViewModel();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Inject required services into the ViewModel
            ViewModel.Navigation = Navigation;
            ViewModel.AuthStateProvider = AuthStateProvider;
            ViewModel.DbContext = DbContext;
            ViewModel.Logger = Logger;

            // Initialize the ViewModel
            await ViewModel.InitializeAsync();
        }
        catch (Exception ex)
        {
            ViewModel.ErrorMessage = "Initialization failed. Please refresh the page.";
            Logger.LogError(ex, "Login page initialization error");
        }
    }

    private async Task HandleLogin()
    {
        await ViewModel.HandleLogin();
        StateHasChanged(); // Manually update UI after login attempt
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandleLogin();
        }
    }
}

<style>
    .login-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        background-color: #f5f5f5;
        padding: 20px;
        box-sizing: border-box;
    }

    .logo {
        width: min(300px, 80%);
        height: auto;
        margin-bottom: 30px;
    }

    .code-label {
        font-size: 24px;
        margin-bottom: 10px;
        font-family: 'Segoe UI', Arial, sans-serif;
        color: #333;
        font-weight: 500;
    }

    .code-input {
        width: 250px;
        height: 45px;
        padding: 5px 15px;
        font-size: 18px;
        text-align: center;
        border: 2px solid #ddd;
        border-radius: 6px;
        margin-bottom: 20px;
        transition: border-color 0.3s;
    }

        .code-input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
        }

        .code-input.invalid {
            border-color: #dc3545;
        }

    .enter-button {
        width: 250px;
        height: 45px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 6px;
        font-size: 18px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .enter-button:hover {
            background-color: #0069d9;
        }

        .enter-button:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }

    .error-message {
        color: #dc3545;
        margin-top: 15px;
        font-size: 16px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .exclamation-icon {
        display: inline-block;
        width: 20px;
        height: 20px;
        background-color: #dc3545;
        color: white;
        border-radius: 50%;
        text-align: center;
        line-height: 20px;
        font-weight: bold;
    }

    .spinner {
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spin 1s ease-in-out infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    @@media (max-width: 480px) {
        .login-container {
            padding: 10px;
        }

        .logo {
            margin-bottom: 20px;
        }

        .code-input, .enter-button {
            width: 90%;
            max-width: 300px;
        }
    }
</style>